1. Encapsulation - Tính chất đóng gói
---> Tính chất đóng gói được thể hiện qua access modifier. Nếu thuộc tính, phương thức là
+ private  : đóng gói trong phạm vi class
+ public   : đóng gói trong phạm vi project, gọi ở đâu cũng được
+ protected: đóng gói trong phạm vi của package 
             lớp con bên ngoài package có thể thừa kế được
+          : đóng gói trong phạm vi của package
           : lớp con bên ngoài package không thể thừa kế
           
2. Polymorphism - Tính chất đa hình
---> Đa hình trong phương thức: có nghĩa là một phương thức(1 tên) nhưng có thể
xử lý nhiều chức năng, nhiều thể hiện
VD: Phương thức tìm tổng ==> sum
+ sum(int, int)
+ sum(float, float)
+ sum(int, int, int)
-- CODE: 
Overloading:
Overriding: 

---> Đa hình trong đối tượng: có nghĩa là 1 đối tượng tùy từng thời điểm nó sẽ
có những thể hiện phù hợp, linh hoạt, lúc là đối tượng này, lúc là đối tượng kia
VD: Đối tượng con người tùy thời điểm có thể
+ Học Sinh
+ Sinh Viên
+ Người đi làm
+ Thành viên trong gia đình

3. Inheritance - Tính chất thừa kế
Methods In ...
+ Class         : declaration and body(normal method) ==> void sum(){}
+ Interface     : declaration(abstract method)        ==> void sum()
+ Abstract Class: normal method ==> void sum(){} and abstract method ==> abstract void sum()      


+ Class extends Class
  . class's method consist of declaration, body
  . Need to override method ? - Optional

+ Class extends AbstractClass
  . Need to override abstract-class's methods
     + Parent methods are abstract method: Required
     +                    normal method: Optional
     
+ Abstract Class implements Interface
  . Need to override interface's methods ==> optional
    + If not override ==> interface's methods becomes abstract method in abstract class
    
==> Cho ví dụ thực tế

+ Class implements Interface
  . interface's method consist of declaration --> abstract method(method without body)
  . Need to override method ? - Required
  
+ InterfaceA(2) extends InterfaceB(3)
  . InterfaceA will contains 5 abstract methods
  . Class implements InterfaceA
    . Require override 5 methods from InterfaceA  
    
+ Class both extends class(ONE) and|or implement interface(ONE to MANY) ? 
+ Multiple Inheritance: NO --> cannot extends more than ONE class
  . Father: #coding ==> C, JAVA 
  . Mother: #coding ==> HTML, CSS
  . Son   : extends Father(x), Mother(x) ==> no require to override parent's method
    ==> Use coding from Father or Mother
    ==> Son son = new Son();
        son.coding(); ==> select from father || mother
  
  . Interface: Father, Mother
  . Class: Son implements Father, Mother
         : override
         ==> Đa thực thi
         
+ Phân biệt Interface và Abstract Class
   + <= JDK1.7
   + >= JDK1.8
+ Từ version 1.8, Interface có thể chưa hàm trừu tượng và hàm bình thường giống Abstract Class
  thì việc đó có thừa không và mục đích để làm gì với static, default, private method trong interface  